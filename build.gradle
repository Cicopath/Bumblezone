buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://maven.moddingx.org' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.moddingx:ModGradle:3.0.2'
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

plugins {
    id 'maven-publish'
    id "net.darkhax.curseforgegradle" version "1.0.7"
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.moddingx.modgradle.mapping'

jarJar.enable()

version = "${mod_version}+${mc_version}"
group = "com.telepathicgrunt"
archivesBaseName = "${modid}_forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    api {}
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        all {
            workingDirectory project.file('run')
            arg "-mixin.config=" + project.getProperty('modid') + ".mixins.json"
            mods {
                the_bumblezone {
                    source sourceSets.api
                    source sourceSets.main
                }
            }
        }
        client {}
        server {}
        data {
            args '--mod', "the_bumblezone", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

repositories {
    maven {
        url = 'https://maven.shedaniel.me'
        content {
            includeGroup 'me.shedaniel.cloth'
            includeGroup 'me.shedaniel'
        }
    }
    maven {
        url = 'https://maven.architectury.dev/'
        content {
            includeGroup 'dev.architectury'
        }
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
        content {
            includeGroup 'com.hollingsworth.ars_nouveau'
        }
    }
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url = 'https://api.modrinth.com/maven/'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        url = 'https://maven.blamejared.com'
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven {
        url = 'https://maven.resourcefulbees.com/repository/maven-public/'
        content {
            includeGroup 'com.telepathicgrunt'
            includeGroup 'com.teamresourceful.resourcefulbees'
            includeGroup 'com.teamresourceful.resourcefullib'
            includeGroup 'com.teamresourceful.resourcefulconfig'
            includeGroup 'software.bernie.geckolib'
            includeGroup 'net.roguelogix.phosphophyllite'
        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
        content {
            includeGroup 'top.theillusivec4.curios'
        }
    }
    maven {
        url = 'https://jitpack.io'
        content {
            includeGroup 'com.github.llamalad7.mixinextras'
        }
    }
    flatDir { dirs 'flatdir' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${project.mixin_extras_version}"))
    implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${project.mixin_extras_version}")) {
        jarJar.ranged(it, "[${project.mixin_extras_version},)")
    }

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    //runtimeOnly fg.deobf("com.telepathicgrunt:StructureVoidToggle-Forge:${project.structurevoidtoggle_version}")
    //runtimeOnly fg.deobf("com.telepathicgrunt:CommandStructures-Forge:${project.commandstructures_version}")
    compileOnly fg.deobf("curse.maven:productive_bees-377897:${project.productivebees_file_id}")
    //runtimeOnly fg.deobf("curse.maven:productive_bees-377897:${project.productivebees_file_id}")

    compileOnly fg.deobf("mezz.jei:jei-${project.jei_mc_version}-forge-api:${project.jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${project.jei_mc_version}-common-api:${project.jei_version}")
    //runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_mc_version}-forge:${project.jei_version}")

    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${project.rei_version}")
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${project.rei_version}")
    compileOnly fg.deobf("dev.architectury:architectury-forge:${project.architectury_version}")
    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")
    //runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${project.rei_version}")
    //runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")
    //runtimeOnly fg.deobf("dev.architectury:architectury-forge:${project.architectury_version}")
    //runtimeOnly fg.deobf("curse.maven:ftbchunks-314906:4443732")
    //runtimeOnly fg.deobf("curse.maven:ftblib-404465:4461006")
    //runtimeOnly fg.deobf("curse.maven:ftbteams-404468:4367026")

    compileOnly fg.deobf("curse.maven:pokecube_aio-285121:${project.pokecubeaio_version}")
    //runtimeOnly fg.deobf("curse.maven:pokecube_aio-285121:${project.pokecubeaio_version}")

    compileOnly fg.deobf("curse.maven:buzzier_bees-355458:${project.buzzier_bees_file_id}")
    //runtimeOnly fg.deobf("curse.maven:buzzier_bees-355458:${project.buzzier_bees_file_id}")
    //runtimeOnly fg.deobf("curse.maven:blueprint-382216:${project.blueprint_file_id}")

    //runtimeOnly fg.deobf("curse.maven:goodall-613215:${project.goodall_file_id}")
    //runtimeOnly fg.deobf("curse.maven:geckolib-388172:${project.geckolib_file_id}")

    //runtimeOnly fg.deobf("curse.maven:potionofbees-355348:${project.potionofbees_file_id}")

    compileOnly fg.deobf("curse.maven:quark-243121:${project.quark_file_id}")
    //compileOnly fg.deobf("curse.maven:autoreglib-250363:${project.autoreglib_file_id}")

    compileOnly fg.deobf("com.hollingsworth.ars_nouveau:ars_nouveau-${project.ars_nouveau}")
    //runtimeOnly fg.deobf("com.hollingsworth.ars_nouveau:ars_nouveau-${project.ars_nouveau}")
    compileOnly fg.deobf("curse.maven:ars_elemental-561470:${project.ars_elemental}")
    //runtimeOnly fg.deobf("curse.maven:ars_elemental-561470:${project.ars_elemental}")
    //runtimeOnly fg.deobf("curse.maven:patchouli-250363:${project.autoreglib_file_id}")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.2-77")
    //runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-5.1.2.2")

    //runtimeOnly fg.deobf("curse.maven:backpacked-352835:4480724")
    //runtimeOnly fg.deobf("curse.maven:travelersbackpacks-321117:4449239")
    //runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios}:api")

    //runtimeOnly fg.deobf("com.teamresourceful.resourcefulbees:resourcefulbees-forge-1.19.2:1.0.0-alpha.15@jar")
    //runtimeOnly fg.deobf("com.teamresourceful.resourcefullib:resourcefullib-forge-1.19.2:1.1.23")
    //runtimeOnly fg.deobf("com.teamresourceful.resourcefulconfig:resourcefulconfig-forge-1.19.2:1.0.19")
    //runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-1.19:3.1.40")
    //runtimeOnly fg.deobf("net.roguelogix.phosphophyllite:Phosphophyllite:0.6.0-beta.6.4")

    //compileOnly fg.deobf("flatdir:Beekeeper-1.19:1.0.5")
    //runtimeOnly fg.deobf("flatdir:Beekeeper-1.19:1.0.5")
}

mixin { 
    add sourceSets.main, "${modid}.refmap.json"
}

processTestResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.jarJar.configure {
    classifier ''
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "TelepathicGrunt",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${mod_version}+${mc_version}",
                "Implementation-Vendor" :"TelepathicGrunt",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar

            pom {
                name = 'TheBumblezone'
                description = 'An unBEElievable dimension full of bees that becomes REALLY angry if you take their honey!'
                url = 'https://github.com/TelepathicGrunt/Bumblezone'

                scm {
                    connection = 'git:https://github.com/TelepathicGrunt/Bumblezone.git'
                    developerConnection = 'git:https://github.com/TelepathicGrunt/Bumblezone.git'
                    url = 'https://github.com/TelepathicGrunt/Bumblezone'
                }

                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://github.com/TelepathicGrunt/Bumblezone/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'telepathic_grunt'
                        name = 'TelepathicGrunt'
                        email = 'asarnesespam@gmail.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = uri("https://nexus.resourcefulbees.com/repository/telepathicgrunt/")
            credentials {
                username "$System.env.MAVEN_USER"
                password "$System.env.MAVEN_PASS"
            }
        }
    }
}

String changelogText = file("CHANGELOG.md").getText('UTF-8')
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = "$System.env.CURSEFORGEKEY"
    int projectId = 362479

    def mainFile = upload(projectId, jar)
    mainFile.changelog = changelogText
    mainFile.addGameVersion("1.19.2")
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.displayName = "The Bumblezone v${project.mod_version} (${project.mc_version} MC)"
}

modrinth {
    token = System.getenv("MODRINTH")
    versionName = "The Bumblezone"
    versionNumber = project.version
    projectId = "38tpSycf"
    uploadFile = jar
    changelog = changelogText
    versionType = "RELEASE"
    gameVersions = ["1.19.2"]
    loaders = ["forge"]
}

task checkForRefmap() {
    if (file("./build/libs/the_bumblezone_forge-${project.mod_version}+${project.mc_version}.jar").exists()) {
        assert zipTree("./build/libs/the_bumblezone_forge-${project.mod_version}+${project.mc_version}.jar")
                .matching { include "the_bumblezone.refmap.json" }.getSingleFile() != null
    }
}

task buildAndRelease{}
tasks.checkForRefmap.mustRunAfter tasks.build
tasks.publish.mustRunAfter tasks.checkForRefmap
tasks.publishCurseForge.mustRunAfter tasks.publish
tasks.modrinth.mustRunAfter tasks.publish
tasks.buildAndRelease.dependsOn(tasks.build, tasks.publish, tasks.publishCurseForge, tasks.modrinth)